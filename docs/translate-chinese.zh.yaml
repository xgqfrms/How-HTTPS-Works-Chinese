# Author
translation:
  source: "由 xgqfrms 翻译: [Twitter](https://twitter.com/xgqfrms) / [GitHub](https://github.com/xgqfrms) / [Website](https://www.xgqfrms.xyz)"
  text_direction: "ltr" # Set to "rtl" for right-to-left languages

# Navigation
nav:
  episodes: "剧集"
  about: "关于"
  ep1: "为什么我们需要 HTTPS?"
  ep2: "密钥"
  ep3: "握手"
  ep4: "HTTPS、SSL、TLS 的区别"
  ep5: "证书颁发机构"
  social: "做一只社交猫"
  more_comics: "阅读更多漫画"
  continue_reading: "继续阅读"

# Home page
home:
  title: "HTTPS 的工作原理"
  certificat_cta: "开始阅读"
  subtitle: "HTTPS 的工作原理 ... 在漫画中"
  p1: "你有没有想过为什么浏览器的 URL 网址栏上会出现一个绿色的锁形图标？为什么它很重要？我们也这样做了，这部漫画是给你的！"
  p2: "跟随 Certificat、Browserbird 和 Compugter 的冒险，他们解释了为什么 HTTPS 对网络的未来至关重要以及它们如何协同工作。"
  p3: "不要让坏螃蟹抓住你（你会知道我们在漫画中的意思）。了解 HTTPS 以及它为何对您的隐私至关重要。"
  small_cta: "现在开始阅读"

# Episode fragments for /episodes
fragment:
  ep1: "从这里开始阅读。 如果你从这部漫画中只带走一件事，那就是这一件事。"
  ep2: "要了解 HTTPS 的工作原理，您必须了解对称和非对称密钥加密的工作原理。 这听起来像是大话，但实际上并非如此。"
  ep3: "当您浏览到 HTTP 安全站点时，您的浏览器和它所连接的服务器会进行秘密握手。 我们将其分解并带入现实世界，以便您可以通过秘密握手问候您的朋友。"
  ep4: "很容易混淆 HTTPS、SSL 和 TLS。 我们经常交替使用这些术语。 让我们用一些历史来谈谈它们中的每一个。"
  ep5: "他们在做什么？ 为什么我们需要它们？ 他们如何验证证书？ 在漫画的最后一章中有很多问题要回答！"

# Episodes
ep1:
  1: "为什么我们需要 HTTPS?"
  2: "我们需要 HTTPS 有 3 个原因。"
  3: "隐私、完整性和身份识别。"
  4: "让我们先谈谈隐私。"
  5: "我将以我的朋友为例。"
  6: ""
  7: "我正在向 Browserbird 发送一条消息。"
  8: "不好了！ 消息未加密！"
  9: "Crab 正在侦听捕获消息的通信。"
  10: "可能将其用于邪恶。"
  11: "隐私意味着没有人可以窃听您的消息。"
  12: "坏螃蟹。 坏的。"
  13: "当您浏览没有 HTTPS 的网站时，我可能会窃听您的密码。"
  14: "浏览器 URL 栏上的绿色挂锁告诉你没有螃蟹在你的肩膀上守望。"
  15: "原因二：完整性。"
  16: "例子来了！"
  17: "我正在向 Browserbird 发送另一条未加密的消息。"
  18: "但在它到达 Browserbird 之前，我拦截了该消息。"
  19: "我更新了消息，说有关 Browserbird 的坏话并将其转发给他。"
  20: "为什么 Compugter 会这样说我？"
  21: ""
  22: "这通常被称为中间人攻击。"
  23: "中间蟹攻击是最糟糕的。"
  24: "坏螃蟹。 坏的。"
  25: "完整性意味着消息在到达目的地的途中没有被操纵。"
  26: "我确保您的通信没有被篡改。"
  27: "原因3: 身份识别。"
  28: "示范时间！"
  29: "标识意味着我可以检查此消息是否来自 Compugter。"
  30: "附加到消息的数字签名可以识别发件人。"
  31: "数字签名不是您电子邮件的结束文本。 任何人都可以复制它；)"
  32: "当您浏览网页时，身份识别意味着您正在访问的站点确实是您认为的那个站点。"
  33: "HTTPS，通过 SSL 证书，确保您与您期望的接收器完全连接。"
  34: "此 SSL 证书有效且由合法的证书颁发机构颁发。 你已准备好出发。"
  35: "我们将很快讨论更多关于 SSL 证书和证书颁发机构的内容，敬请期待。"
  36: "总之，隐私、完整性和身份识别是 HTTPS 如此重要的主要原因。"
  next: "接下来在 HowHTTPS.works..."
  next_teaser: "既然我们知道了原因，下一步就是了解对称和非对称加密。 很大的话题，但简单的概念。"

ep2:
  1: "密钥"
  2: "HTTPS 需要一种在 Web 上提供隐私、完整性和标识的方法。"
  3: "这种机制被称为“加密”。"
  4-1: "我们来谈谈这两种加密算法。"
  4-2: "现在，我把那些密钥放在哪里了？"
  5-1: "最后！"
  5-2: "让我们从对称密钥算法开始。"
  6: "在这种情况下，只有一个密钥来加密和解密消息。"
  7: "在向 BrowserBird 发送消息之前，我使用密钥对消息进行加密。"
  8: "您可以将加密过程想象成将消息放入一个盒子并用钥匙锁定盒子。"
  9: "只有拥有密钥副本的人才能打开盒子并阅读消息。"
  10: "这保证了盒子在拿到正确钥匙的人之前是不能打开的。"
  11: "当 Browserbird 拿到盒子时，他们会用钥匙打开它并阅读信息。"
  12: "将密钥保密很重要。 您不应以纯文本形式共享密钥，或将其与盒子一起发送。 或者把它放在你的口袋里。"
  13: "请记住，任何有密钥的人都可以打开盒子。"
  14-1: "使用盒子是理解加密的一个很好的视觉效果，但它确实过于简单化了。"
  14-2: "让我们解决这个问题！"
  15: "实际上，任何人在没有密钥的情况下查看消息的人只会看到无意义的文本。"
  16: "此文本由加密算法生成。"
  17: "这是一种奇特的方式，可以说文本是通过一系列步骤打乱的。"
  18: "它经过多次变形和传播。 每次都进一步混淆消息。"
  19: "要解密消息，我们只需要应用相同的步骤，但顺序相反。"
  20: "加密密钥与消息混在一起，所以即使你知道加密算法，没有密钥，消息仍然是没意思的。"
  21: "这就是密钥看起来的样子."
  22: "对称密钥的一个主要问题是它们难以共享。"
  23: "您必须非常小心分发密钥的方式。"
  24: "这把我们带到了非对称密钥。"
  25: "与对称密钥的主要区别是您有 2 把密钥。"
  26: "一把密钥是公开的，另一把是私人的。 他们配对并一起工作。"
  27-1: "与任何人共享您的公钥。 以纯文本形式发送，制作贴纸，纹身。 任何你想要的！ 是公开的！"
  27-2: "我喜欢纹身。"
  28: "Compugter 正在将他们的公钥发送给 BrowserBird。"
  29: "现在我正在向他们发送一条消息，用他们的公钥对其进行加密。"
  30: "换句话说，BrowserBird 将消息放入一个盒子并用 Compugter 的公钥锁定它。"
  31: "我现在可以使用我的私钥来阅读消息。"
  32: "这是主要思想。 只有私钥才能打开用公钥对锁定的盒子。"
  33: "我使用 Browserbird 的公钥向他们发送另一条消息。"
  34: "这不仅有利于隐私，也有利于识别，因为我们确定只有 2 把钥匙的所有者才能打开消息。"
  35: "接下来，我们将研究当我们使用 SSL 连接到站点时，对称和非对称密钥如何发挥作用。"
  next: "接下来在 HowHTTPS.works..."
  next_teaser: "为加密万岁！ 下一步是什么？ 了解您的浏览器和互联网之间握手的秘密，使您的信息安全可靠。"

ep3:
  1: "握手"
  2: "当您开始阅读此漫画时，您的浏览器在地址栏上显示了一个绿色锁。"
  3: "那是怎么发生的？"
  4: "您的浏览器与我们托管此漫画的服务器进行了通信，并且它们都建立了安全连接以传输消息。"
  5: "但首先，他们需要就如何安全通信达成一致。"
  6: "如果协商不成功，您的浏览器会通过显示错误或警告来通知您。"
  7: "如果达成协议，您的浏览器很乐意在地址栏上显示一个绿色挂锁。"
  8: "这个过程，浏览器和服务器之间的协商，被称为“握手”。"
  9: "它发生得非常快。 我们将向您展示它是如何工作的。"
  10: "Browserbird 将成为您的浏览器。"
  11: "Compugter 将作为我们的服务器。"
  12: "把它拿走吧，伙计们！"
  13: "准备好？ 这是慢动作中的“握手”的样子。"
  14: "左拍手"
  15: "右拍手"
  16: "垂直沙卡"
  17: "沙卡水平旋转"
  18: "挠痒痒"
  19: "完毕！"
  20: "让我们再做一次，但速度更快。"
  21: "左拍手 - 右拍手 - 沙卡 - 沙卡旋转 - 挠痒痒。"
  22: "再来一次！"
  23: "停止！"
  24: "让我们分解一下。 一步步。"
  25: "第一步：左拍手。 又叫客户端您好。"
  26: "我将可以使用的 SSL/TLS 版本和加密算法的列表发送到 Compugter。"
  27: "加密算法列表的一个花哨的词是“密码套件”。"
  28: "所以你可以在餐桌上听起来像个专业人士。"
  29: "SSL 和 TLS 协议随着时间的推移而发展，我们很快就会讨论更多。"
  30: "然后我等待 Compugter 的答复。"
  31: "第二步：右拍手。 又叫服务器端你好。"
  32: "我从 BrowserBird 发送给我的那些 SSL/TLS 版本和加密算法中选择了最好的，并且基于我的偏好。"
  33: "我回复了我的证书，其中包括我的公钥，这样他们就可以验证我是谁。"
  34: "第三步：垂直沙卡。 又叫客户端密钥交换。"
  35: "我检查了 Compugter 的证书以确保它们是合法的。"
  36: "我生成了一个“预主密钥”，以便我们稍后在生成唯一密钥时都可以使用它。"
  37: "我用 Compugter 的公钥加密该预主密钥，然后将其发送给他。"
  38: "第四步：沙卡水平旋转。 又名更改密码规范。"
  39: "我使用我的私钥来解密预主密钥。"
  40: "到目前为止，他们之间的所有沟通都是公开的。 他们没有保护任何消息。"
  41: "他们使用非对称密钥（公钥和私钥）来加密预主密钥，因此没有人可以监视它。"
  42: "现在它们都生成了相同的“共享密钥”，它们将用作对称密钥。"
  43: "BrowserBird 发送一个测试。"
  44: "Compugter 回应。"
  45: "第五步：挠痒痒。 又叫现在一切都安全了。"
  46: "现在, 在 Browserbird 和 Compugter 之间来回传输的所有数据, 现在在会话的其余部分都得到了保护。"
  47: "密码，信用卡详细信息，一切。"
  48: "很简单，对吧？"
  49: "下次您通过 HTTPS 安全连接到网站时，请为您的浏览器提供沙卡，因为您知道他们握手的秘密。"
  next: "接下来在 HowHTTPS.works..."
  next_teaser: "HTTPS、SSL、TLS，天哪！我午饭刚吃了一个首字母缩略词汤。 他们的意思是什么？ 它们是一样的吗？"

ep4:
  1: "HTTPS、SSL、TLS 的区别"
  2: "很容易混淆这些术语并互换使用它们。"
  3: "让我们看看每一个，看看它们有什么不同。"
  4: "什么是 HTTPS？"
  5: "HTTPS 是 HTTP 的安全版本：超文本传输协议。"
  6: "HTTP 是您的浏览器和 Web 服务器用于通信和交换信息的协议。"
  7: "当该数据交换使用 SSL/TLS 加密时，我们称之为 HTTPS。 “S”代表安全。"
  8: "我的天啊！ 等待！ 我说的是 SSL/TLS！ 为什么？"
  9: "因为这是谈论 SSL 和 TLS 的准确方式。"
  10: "SSL 代表“安全套接字层”。 由 Netscape 创建的一种协议。"
  11: "按照 Internet 标准，SSL 是一个恐龙。 第一个版本从未发布过，第 2 版在 1995 年与浏览器 Netscape 1.1 一起发布。"
  12: "那年晚些时候，Netscape 发布了第 3 版，因为第 2 版存在一些重大的安全问题。"
  13: "直到 1999 年，我们都是快乐的猫。Netscape 和 Microsoft 之间的浏览器大战、对标准的需求以及 Britney Spears - “...宝贝再来一次”改变了我们所知道的世界。 永远。"
  14: "Oops, I did it again."
  15: "Netscape gave control of SSL protocol to the IETF: Internet Engineering Task Force."
  16: "Before 1999 ended, IETF released TLS version 1.0 (Which was really SSL 3.1)."
  17: "SSL was renamed to TLS: Transport Layer Security. Creating confusion and chaos still to this day."
  18: "Thanks 1999."
  19: "TLS 1.0 took off and version 1.1 was released in 2006."
  20: "A couple of years later, in 2008, TLS 1.2 was released to address a few flaws and exploits."
  21: "However, it's not until 2013 that browsers start to catch up and add support for TLS 1.2."
  22: "To add to the confusion, SSL 3.0 was officially deprecated in 2015."
  23-1: "TLS 1.3 was approved in march 2018 and your browser might already support it."
  23-2: "Click here to check the current TLS version for your browser."
  23-3: "But come back to finish the story."
  24: "TLS 1.3 brings great security improvements and removes old weaker features."
  25: "No worries if your browser doesn't support it yet. TLS 1.2 is still the recommended version if you are reading this in Spring/Summer 2020."
  26: "Let's recap."
  27: "HTTPS is just the HTTP protocol but with data encryption using SSL/TLS."
  28: "SSL is the original and now deprecated protocol created at Netscape in the mid 90s."
  29: "TLS is the new protocol for secured encryption on the web maintained by IETF."
  30: "And now you know the hiss-tory."
  next: "接下来在 HowHTTPS.works..."
  next_teaser: "Certificates and Certificate authorities: What Do They Know? Do They Know Things?? Let's Find Out!"

ep5:
  1: "证书颁发机构"
  2: "A certificate authority (CA) is a third-party organization with 3 main objectives:"
  3: "1. Issuing certificates."
  4: "2. Confirming the identity of the certificate owner."
  5: "3. Providing proof that the certificate is valid."
  6: "You might have heard of Symantec, Comodo, or Let's Encrypt, among others."
  7: "Becoming a CA is an intense task of security requirements and audits."
  8: "You need to be trusted to be accepted into a root store."
  9: "A root store is basically a database of trusted CAs."
  10: "Apple, Windows, and Mozilla run their own root stores that they pre-install in your computer or device."
  11: "Which certificate should you buy? You have basically 3 flavors."
  12: "Domain validated. The certificate just verifies the domain name, and nothing else. You probably need this one."
  13: "Organization validated. The certificate requires the validation and manual verification of the organization behind the certificate."
  14: "Extended validation. The certificate requires an exhaustive verification of the business."
  15: "All valid certificates result in the browser displaying a secure badge in the browser bar. EV certificates generally display the company name as well."
  16: "But how do certificates get validated?"
  17: "When a CA issues a certificate, they sign the certificate with their root certificate pre-installed in the root store."
  18: "Most of the time it's an intermediate certificate signed with a root certificate."
  19: "If a cat-astrophy would occur and the root certificate is compromised, it's easier to revoke the intermediate certificates, since the root certificates are installed on each device."
  20: "Let's walk through how a certificate is validated. The process is based on a 'chain of trust'."
  21: "Your browser connects to a site via HTTPS and downloads the certificate."
  22: "The certificate is not a root certificate."
  23: "Your browser downloads the certificate that was used to sign the certificate on the site."
  24: "But this certificate is still not the root certificate."
  25: "Your browser once more looks up the certificate that signed the intermediate certificate."
  26: "It's the root certificate! Yay!"
  27: "The entire certificate chain is trusted, and thus the site certificate is trusted as well."
  28: "In the event that the last certificate is not a root certificate, and there are no more certificates to download, the chain is untrusted."
  29: "But why use a certificate authority when you can self-sign your certificates?"
  30: "A self-signed certificate provides the same level of encryption as one generated by an authority."
  31: "No crabs can spy on your data."
  32: "And there is no charge to self-sign your certificates!"
  33: "Yes, but almost every browser checks that the certificate is issued by a trusted authority."
  34: "As such visitors are warned that the certificate cannot be trusted."
  35: "Self-signed certificates can be useful for testing, and intranets, but you should avoid using them on public sites."
  36: "Self-signed certificates can be forged. Basically, they say 'Trust me, it's me, I promise!'."
  37: "A trusted certificate says: 'Trust me, an authority verified me'."
  38: "Talking about trust. Thank you for trusting us through this story."
  39: "Unfortunately, it is coming to an end."
  40: "We hope you enjoyed this comic!"
  41: "See you soon!"
  end-title: "Hey, you did it!"
  end-p1: "You finished the comic! Thanks from the bottom of of our cat paws for spending some of your day reading about HTTPS."
  end-p2: "We propose three activities to distract you from the fact that there is not another episode to read."
  option-1: "Take the quiz"
  option-1-p: "To make it up to you, you can test your brand hot knowledge of HTTPS in a quiz. Yes, that's right. We even send you a certificate of completion if you score high enough."
  option-2: "Vent on social networks"
  option-2-p: "The human thing to do. If you want to put more pressure on us to make more comics, here are a few examples to get us to the edge of our seats."
  option-3: "Visit DNSimple"
  option-3-p: "If you enjoyed the comic, and need an SSL certificate to secure your site, or a rock solid and easy-to-use DNS (not our words), or a brand new fancy domain, have a look at us."
  post-data: "P.S. If you want to suggest a new episode (please no, because we'll have to update this page) or give us feedback about the existing ones,"
  post-data-link: "we are all cat hears"
